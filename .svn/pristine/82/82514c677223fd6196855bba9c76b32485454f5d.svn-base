package spark.client;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.apache.commons.codec.binary.Base64;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;
import org.springframework.web.client.AsyncRestTemplate;

/**
 * @author CHENYB
 * @since 2016年10月18日
 */
public class SparkSpringRest implements Serializable {

	String unitServerUrl = "http://192.168.6.41:8090/jobs?appName=startRec&classPath=com.wdcloud.graphx.jobServer.RecBasedGraphxServer";

	/**
	 * @author CHENYB
	 * @param args
	 * @since 2016年10月18日 下午6:21:40
	 */
	public static void main(String[] args) {
		List<String> list1 = new ArrayList<String>();
		list1.add("5");
		SparkSpringRest rest = new SparkSpringRest();
		rest.invokSparkBySpringRestWithoutResult(list1);
	}

	/**
	 * @author CHENYB
	 * @param serverUrl
	 * @since 2016年10月19日 下午2:06:14
	 */
	public void invokSparkBySpringRestWithoutResult(List<String> list) {
		System.out.println("用户业务id是："+list.toString());
		AsyncRestTemplate asyncRestTemplate = new AsyncRestTemplate();//声明spring异步调用模板，spring调用rest接口的类
		HttpHeaders headers = new HttpHeaders();//创建一个请求头对象
		// MediaType
		MediaType type = MediaType
				.parseMediaType("application/json; charset=UTF-8");
		headers.setContentType(type);
		headers.add("Accept", MediaType.APPLICATION_JSON.toString());
		// Authorization
		String plainCreds = "admin:admin";
		byte[] plainCredsBytes = plainCreds.getBytes();
		byte[] base64CredsBytes = Base64.encodeBase64(plainCredsBytes);
		String base64Creds = new String(base64CredsBytes);
		headers.add("Authorization", "Basic " + base64Creds);
		Properties p = new Properties();
		p.put("namespace", "DECEMBER");
		p.put("edgeTable", "T_LOG_ACTION");
		p.put("pAttrTable", "T_LOG_PERSON");
		p.put("iAttrTable", "T_LOG_ITEM");
		p.put("userIdList", list);
		p.put("vertexPath", "hdfs://192.168.6.84:9000/graph/DecemberVertex");
		p.put("edgePath", "hdfs://192.168.6.84:9000/graph/DecemberEdges");
		System.out.println("!!"+p.toString());
		HttpEntity<Properties> formEntity = new HttpEntity<Properties>(p,headers);
		ListenableFuture<ResponseEntity<Void>> forEntity = asyncRestTemplate
				.postForEntity(unitServerUrl, formEntity, Void.class);
		//异步调用后的回调函数
		forEntity
				.addCallback(new ListenableFutureCallback<ResponseEntity<Void>>() {
					// 调用失败
					@Override
					public void onFailure(Throwable e) {
						System.out.println("=====rest response faliure======");
						e.printStackTrace();
					}

					// 调用成功
					@Override
					public void onSuccess(ResponseEntity<Void> result) {
						System.out
								.println("--->async rest response success----, result = "
										+ result);
			
					}
				});
	}

}
