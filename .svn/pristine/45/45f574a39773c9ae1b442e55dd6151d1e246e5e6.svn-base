package com.wdcloud.graphx.modelTraining.graph

import org.apache.spark.rdd.RDD
import org.apache.spark.graphx.Graph
import org.apache.spark.graphx.EdgeDirection
import org.apache.spark.graphx.VertexId
import scala.Iterator
import com.wdcloud.graphx.scalaUtil.PregelUtil
import akka.event.slf4j.Logger
import com.wdcloud.graphx.javaUtil.Configuration
import com.wdcloud.graphx.scalaUtil.HbaseUtil
import com.wdcloud.graphx.modelTraining.graph.util.GraphResultHandle
import com.wdcloud.graphx.modelTraining.Recommender

/**
 * 进行基于圈子的推荐
 */
class MixCommunityRecommender extends Recommender with Serializable{    
  
  val logger = Logger(this.getClass.getName)
  var conf: Configuration = null
  var userConf: Map[String, String] = null
  
  var middleResult: RDD[(VertexId, (String, Map[String, List[(String, Double)]]))] = null
   /*  
   * 基于圈子对用户进行全量推荐好友、物品和圈子
   * 步骤如下：首先所有顶点发送信息给src顶点，也就是user顶点，user顶点收到消息后将该消息以kv形式保存到map属性中；然后第二次迭代user顶点发送它们收到的消息和它们自己的属性给圈子顶点，
   * 圈子顶点收到消息后以kv形式保存到map属性中；最后第三次迭代圈子顶点将收到的消息发送到user顶点。user顶点收到消息后从消息中去除掉自己直接关系的顶点信息并且对结果进行合并，作为最终的推荐结果。
   * 其间要将图上的hash后的id值转化为业务id后作为处理结果返回。
   * 
   * 迭代过程中使用自定义的PregelUtil的成员变量iterNum来断定迭代次数
   * 	iterNum初始值是0，没进行一次迭代增加1
   * 
 	 * 返回的结果：RDD[(String, String, Map[String, List[(String, Double)]])]-->RDD[(命名空间名称, 用户的业务id, Map[推荐物品类型, List[(推荐物品业务id, score)]])]
   */
  def predict(graph: Graph[Map[String, Object], Double]): RDD[(String, String, Map[String, List[(String, Double)]])] = {
    
    val namespace = userConf.get("namespace").get
    
    val PregelUtil = new PregelUtil()
    //调用自定义的pregel方法
    val g1 = PregelUtil.apply(graph, List[(VertexId, (String, Double, String))](), 3, EdgeDirection.Either)(
      (vId, oldAttr, newAttr) =>
        if (newAttr.size == 0) { //初始化

          oldAttr.+("rec" -> Map[String, List[(VertexId, Double, String)]]())
        } else if (PregelUtil.iterNum == 3) { //第三次迭代，将圈子上的推荐信息聚合到圈子的直接关系用户上
          val dealData = GraphResultHandle.finallyPointResultHandle(oldAttr, newAttr, vId)
          //将处理后的信息保存到map中
          oldAttr.updated("rec", dealData)  
        }else{//第一次和第二次迭代
          oldAttr.updated("rec", newAttr)
        },
  
      triplet =>
        if (PregelUtil.iterNum == 0) { //初始化后第一次迭代
          val dstAttr = triplet.dstAttr
          Iterator((triplet.srcId, List((triplet.dstId, (dstAttr.apply("type").asInstanceOf[String], triplet.attr, dstAttr.apply("businessId").asInstanceOf[String])))))

        } else if (PregelUtil.iterNum == 1 && triplet.dstAttr.apply("type").asInstanceOf[String].equals("circle")) { //第二次迭代，开始发送消息到圈子顶点了

          val srcAttr = triplet.srcAttr
          //获取到圈子的一度用户和用户的下一级直接关系物品的亲密度score，格式是:List[(VertexId, (String, Double))]，乘上圈子和直接用户的score作为圈子二度关系物品的得分
          //然后重新组成字符串发送到圈子节点上
          val attr = srcAttr.apply("rec").asInstanceOf[List[(VertexId, (String, Double, String))]].map { x =>
            val score = x._2._2 * triplet.attr.toDouble
            (x._1, (x._2._1, score, x._2._3))
          }
          
          //因为基于圈子给用户推荐好友，圈子的直接关系用户被推荐给圈子的另一个用户的概率理论会远远大于圈子的二度用户，所以这里将圈子的直接关系用户顶点添加到发送的消息中
          val userInfo: List[(VertexId, (String, Double, String))] = List((triplet.srcId, (srcAttr.apply("type").asInstanceOf[String], triplet.attr, srcAttr.apply("businessId").asInstanceOf[String])))
          //将圈子的直接关系用户顶点信息追加到attr上
          val newAttr = attr.:::(userInfo)
          
          //将用户顶点上第一次迭代收到的消息置为空，以腾出所占用的内存
          srcAttr.updated("rec", Map[String, List[(VertexId, Double, String)]]())
          
          //将消息发送到圈子节点上
          Iterator((triplet.dstId, newAttr))

        } else if (PregelUtil.iterNum == 2) { //第三次迭代，将圈子上的推荐信息聚合到圈子直接相关的人上
          val dstAttr = triplet.dstAttr
          val srcAttr = triplet.srcAttr
          val sendMsg = dstAttr.apply("rec").asInstanceOf[List[(VertexId, (String, Double, String))]]
          
          //将圈子上第二次迭代收到的消息置为空，以腾出所占用的空间
          dstAttr.updated("rec", Map[String, List[(VertexId, Double, String)]]())
          
          Iterator((triplet.srcId, sendMsg))
        } else {

          Iterator.empty
        },
        (data1, data2) => data1.:::(data2)
      ).cache
      
    middleResult = GraphResultHandle.recResultHandle(g1)
    
    //将结果保存到hbase中
    //HbaseUtil.writeRecInfoBasedCircle(namespace, "T_REC_BASEDCIRCLE", middleResult.collect())
    
    logger.warn("基于圈子和好友的推荐成功")
    
    middleResult.reduceByKey((x, y) => (x._1, GraphResultHandle.mapCombine(x._2, y._2))).map(x => (namespace, x._2._1, x._2._2))
  }
  
}