package com.wdcloud.graphx.modelBuild.graph.create

import org.apache.spark.RangePartitioner
import org.apache.spark.SparkContext
import org.apache.spark.graphx.EdgeDirection
import org.apache.spark.graphx.Graph
import org.apache.spark.graphx.VertexId
import org.apache.spark.graphx.Graph.graphToGraphOps
import org.apache.spark.graphx.GraphOps
import org.apache.spark.graphx.PartitionStrategy
import org.apache.spark.storage.StorageLevel

import com.wdcloud.graphx.environmentContext.DataContext
import com.wdcloud.graphx.javaUtil.Configuration
import com.wdcloud.graphx.modelBuild.graph.GraphModel
import scala.collection.mutable.Map
import akka.event.slf4j.Logger
import com.wdcloud.graphx.modelBuild.graph.ReadData

/**
 * 通过边数据生成图
 */
class CreateGraphModelFromEdgeByHbase extends GraphModel{
   
  val logger = Logger(this.getClass.getName) 
  
  override def createGraph(sc: SparkContext, @transient conf: Configuration): Graph[Map[Int, Any], Double] = {

    //读取用户配置信息
    val userConf = ReadData.userConf
        
    //创建边RDD  
    val edges = ReadData.readEdgesData(sc, conf) 
    
    //读取顶点类型  
    val vType = ReadData.readTypeFromEdgeData(sc)
    
    //定义匿名函数，来处理向顶点添加元素的操作
    val joinMethod: (VertexId, Map[Int, Any], Any) => Map[Int, Any] = (id, oldCost, extraCost) => {
      oldCost.isEmpty match{
        case true => extraCost.asInstanceOf[Map[Int, Any]]
        case false => oldCost.+=(ReadData.pointAttrMap.get("neiborId").get -> extraCost.asInstanceOf[Array[VertexId]])
      }
    } 
    
    //创建中间图，并缓存
    val defaultValue: Map[Int, Any] = Map[Int, Any]()  
    val graph: Graph[Map[Int, Any], Double] = Graph.fromEdges(edges, defaultValue)
                     .partitionBy(PartitionStrategy.EdgePartition2D, 48)
                     .joinVertices(vType)(joinMethod)//将顶点属性type添加到各个顶点上
                     .cache()

    //全图操作，每个顶点收集自己邻居顶点id
    val neighIds = graph.collectNeighborIds(EdgeDirection.Either)
    
    //将收集到信息的顶点重新加入到原图上，使得图中对应顶点包含自己邻居节点的id这一属性
    val fGraph = graph
                .joinVertices(neighIds)(joinMethod) 
                .groupEdges((e1, e2) => (e1 + e2))//合并边，调用groupEdges时要先调用partitionBy
                .cache()

    //释放资源
    graph.unpersistVertices(blocking = false)
    graph.edges.unpersist(blocking = false)
    logger.warn("读取hbase中边数据生成图成功") 

    fGraph
  }
}