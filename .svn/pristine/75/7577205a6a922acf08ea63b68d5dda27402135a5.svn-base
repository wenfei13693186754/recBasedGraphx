package com.wdcloud.graphx.modelTraining.graph

import org.apache.spark.graphx.Graph
import org.apache.spark.rdd.RDD

import com.wdcloud.graphx.javaUtil.Configuration
import com.wdcloud.graphx.modelTraining.Recommender
import com.wdcloud.graphx.modelTraining.graph.util.GraphResultHandle

import akka.event.slf4j.Logger
import com.wdcloud.graphx.environmentContext.DataContext
import org.apache.spark.SparkContext

/**
 * 为所有用户进行基于圈子和基于二度好友的推荐
 * 	graphModel: 进行推荐的图模型
 *  namespace：命名空间
 * 
 */
class CompositeRecForAllUserRecommenders(userConf: Map[String, String]) extends Recommender(userConf) { 

  val logger = Logger(this.getClass.getName) 
  /**
   * 为所有用户进行基于圈子和基于二度好友的推荐
   * 	return: 推荐结果  
   */
  override def predict(sc: SparkContext, graphModel: Graph[Map[String, Object], Double]): RDD[(String, String, Map[String, List[(String, Double)]])] = { 
    //基于好友的推荐，包括推荐好友、物品和圈子，返回值类型是：
    //RDD[(VertexId, (String, Map[String, List[(String, Double)]]))]-->RDD[(用户id，(用户业务id, Map[推荐物品类型, List[(推荐物品业务id, Double)]]))]
    val recommenderBasedFriends = new TwoDegreesFriendsRecommender(userConf)
    val recBasedFriends = recommenderBasedFriends.predict(sc, graphModel)  

    logger.warn("基于好友推荐完成")
    //离线的对每个用户基于圈子进行物品、好友和圈子的推荐,返回值是RDD[(String, String, Map[String, List[(String, Double)]])]
    val recommenderBasedcircle = new MixCommunityRecommender(userConf)
    val recBasedCircle = recommenderBasedcircle.predict(sc, graphModel)

    logger.warn("基于圈子推荐完成")
    val namespace = userConf.get("namespace").get
    //对两种推荐结果进行合并   INFO.LOGINID:112233xyf;
    val comResult = GraphResultHandle.combineResult(namespace, recommenderBasedFriends.middleResult, recommenderBasedcircle.middleResult)
  
    logger.warn("开始释放缓存的图和基于好友和基于圈子的推荐结果")  
    graphModel.unpersistVertices(blocking = false)
    graphModel.edges.unpersist(blocking = false).count()
    logger.warn("释放缓存的图和基于好友和基于圈子的推荐结果完成")  

    comResult
  }
}