package com.wdcloud.graphx.recommender.graph

import org.apache.spark.graphx.EdgeTriplet
import org.apache.spark.rdd.RDD
import org.apache.spark.graphx.Graph
import org.apache.spark.graphx.EdgeDirection
import org.apache.spark.graphx.VertexId
import scala.Iterator
import com.wdcloud.graphx.recommender.graph.util.GraphResultHandle
import com.wdcloud.graphx.scalaUtil.PregelUtil
import com.wdcloud.graphx.recommender.Recommender

/**
 * 进行基于二度好友的推荐
 */
class TwoDegreesFriendsRecommender extends Recommender {  
  var result: RDD[(VertexId, (String, Map[String, List[(String, Double)]]))] = null
  /*
   * 基于一度好友推荐好友、物、圈子
   * 使用pregel，迭代两次，第一次dst顶点发送消息给src顶点，第二次dst顶点发送它收到的第一次迭代的消息给src顶点
   * 迭代次数使用自定义的PregelUtil中的iterNum来判定
   * 	iterNum初始值是0，每执行一次迭代增加1
   * vprog:
   * 		1.初始化：初始化信息是 List[(VertexId, (String, Double, String))]()，vprog函数收到这个信息后，给每个顶点添加rec->Map[String, List[(VertexId, Double, String)]]()属性，用来存放结果
   * 		2.第一次迭代收到的消息是 List[(VertexId, (type, Double, 业务id))]((...))，将其放在key是rec的位置；
   * 		3.第二次迭代收到的消息是List[(VertexId, (type, Double, 业务id))]((...))，将其放在key的位置上；
   * 			这个时候要对数组进行处理：包括对相同VertexId的数据进行分数累加去重和分组，最后的处理结果格式是：Map[String, List[(VertexId, Double, String)]]
   * 
   * sendMsg：
   * 		1.第一次迭代：发送 List[(VertexId, (type, Double, 业务id))]((...))给src顶点
   * 		2.第二次迭代：限定只有收到第一次迭代消息的顶点才可以发送消息（发送消息的方向设置为IN），发送的消息是第一次迭代收到的消息；
   * 				第二次发送数据时候，要将第一次迭代收到的消息中的分数乘上当前triplet上的score作为最终的score
   * 
   * mergeMsg：
   * 		1.第一次迭代，收到的消息是List[(VertexId, (type, Double, 业务id))]((...))，将这些消息使用.:::合并为一个List
   * 		2.第二次迭代，收到的消息是List[(VertexId, (type, Double, 业务id))]((...))，将这些消息使用.:::合并为一个List
   * 
   * 返回值类型是：RDD[(String, Map[String, List[(String, Double)]])]
   */
  val simPregel = new PregelUtil()
  def predict(graph: Graph[Map[String, Object], Double], namespace: String): RDD[(String, String, Map[String, List[(String, Double)]])] = {
    //调用自定义的PregelUtil方法执行pregel迭代操作
    val g2 = simPregel.apply(graph, List[(VertexId, (String, Double, String))](), 2, EdgeDirection.In)(vprog, sendMsg, merge)

    result = GraphResultHandle.recResultHandle(g2)
    result.reduceByKey((x, y) => (x._1, GraphResultHandle.mapCombine(x._2, y._2))).map(x => (namespace, x._2._1, x._2._2))
  }

  /**
   * 基于好友推荐的merge函数
   */
  private def merge(list1: List[(VertexId, (String, Double, String))], list2: List[(VertexId, (String, Double, String))]): List[(VertexId, (String, Double, String))] = {
    val list = list1.:::(list2)
    list
  }

  /**  
   * 基于好友推荐的vprog函数
   */
  private def vprog(vId: VertexId, oldAttr: Map[String, Object], newAttr: List[(VertexId, (String, Double, String))]): Map[String, Object] = {

    if (newAttr.size == 0) { //初始化
      oldAttr.+("rec" -> Map[String, List[(String, Double)]]())
    } else if (simPregel.iterNum == 1) { //第一次迭代,收到的信息格式：List[(VertexId, (String, Double, String))]

      oldAttr.updated("rec", newAttr)
    } else if (simPregel.iterNum == 2) { //第二次迭代,收到的信息格式：List[(VertexId, (String, Double, String))]-->List[(被推荐物品hash后的id,, (类型, Double, 业务id))]
      val dealData = GraphResultHandle.finallyPointResultHandle(oldAttr, newAttr, vId)

      oldAttr.updated("rec", dealData)
    } else {

      oldAttr
    }
  }

  /**
   * 基于好友推荐的sendMsg函数
   */
  private def sendMsg(triplet: EdgeTriplet[Map[String, Object], Double]): Iterator[(Long, List[(VertexId, (String, Double, String))])] = {
    if (simPregel.iterNum == 0) { //第一次迭代发送的数据格式：List[(VertexId, (String, Double, String))]-->List[(被推荐物品hash后的id, (类型, Double, 业务id))]
      val dstAttr = triplet.dstAttr
      Iterator((triplet.srcId, List[(VertexId, (String, Double, String))]((triplet.dstId, (dstAttr.apply("type").asInstanceOf[String], triplet.attr, dstAttr.apply("businessId").asInstanceOf[String])))))
    } else { //第二次迭代,限定只有收到第一次迭代消息的顶点才可以发送消息（发送消息的方向设置为IN），发送的消息是第一次迭代收到的消息；
      val dstAttr = triplet.dstAttr
      //第二次发送数据时候，要将第一次迭代收到的消息中的分数乘上当前triplet上的score作为最终的score
      if (dstAttr.apply("rec").isInstanceOf[List[(VertexId, (String, Double, String))]]) {
        val itera1 = dstAttr.apply("rec").asInstanceOf[List[(VertexId, (String, Double, String))]] //取出每个dst顶点上的map中的“rec”键对应的value，类型是：List[(String,String)],分别代表id和类别:score类型的数组
        val itera2 = itera1.map(x => (x._1, (x._2._1, x._2._2 * triplet.attr, x._2._3)))

        //将第一次迭代顶点收到的消息置为空，以腾出内存空间
        dstAttr.updated("rec", Map[String, List[(String, Double)]]())

        Iterator((triplet.srcId, itera2))
      } else {
        Iterator.empty
      }
    }
  }

}