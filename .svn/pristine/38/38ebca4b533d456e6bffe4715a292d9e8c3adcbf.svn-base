package com.wdcloud.graphx.unit

import scala.reflect.ClassTag
import org.apache.spark.graphx._
import org.apache.spark.Logging
import org.apache.spark.graphx.Graph.graphToGraphOps

class PregelUtil extends Logging with Serializable{
  
  var iterNum = 0
  
  def apply[VD: ClassTag, ED: ClassTag, A: ClassTag]
     (graph: Graph[VD, ED],    
      initialMsg: A,
      maxIterations: Int = Int.MaxValue,
      activeDirection: EdgeDirection = EdgeDirection.Either)
     (vprog: (VertexId, VD, A) => VD,
      sendMsg: EdgeTriplet[VD, ED] => Iterator[(VertexId, A)],
      mergeMsg: (A, A) => A)
    : Graph[VD, ED] =
  {
    //第一次迭代，对每个节点用vprog函数计算。
    var g = graph.mapVertices((vid, vdata) => vprog(vid, vdata, initialMsg)).cache()
    // compute the messages 根据发送、聚合信息的函数计算下次迭代用的信息。
    var messages = g.mapReduceTriplets(sendMsg, mergeMsg)
    //数一下还有多少节点活跃 
    var activeMessages = messages.count()  
    // 下面进入循环迭代  
    var prevG: Graph[VD, ED] = null
    while (activeMessages > 0 && iterNum < maxIterations) {
      iterNum += 1
      // 接受消息并更新节点信息 
      prevG = g
      g = g.joinVertices(messages)(vprog).cache()
      val oldMessages = messages
      // Send new messages, skipping edges where neither side received a message. We must cache
      // messages so it can be materialized on the next line, allowing us to uncache the previous
      // iteration.
      messages = g.mapReduceTriplets(
        sendMsg, mergeMsg, Some((oldMessages, activeDirection))).cache()
      // The call to count() materializes `messages` and the vertices of `g`. This hides oldMessages
      // (depended on by the vertices of g) and the vertices of prevG (depended on by oldMessages
      // and the vertices of g).
      activeMessages = messages.count()

      logInfo("Pregel finished iteration " + iterNum)

      // Unpersist the RDDs hidden by newly-materialized RDDs
      oldMessages.unpersist(blocking = false)
      prevG.unpersistVertices(blocking = false)
      prevG.edges.unpersist(blocking = false)
      // count the iteration
      
    }

    g
  } // end of apply

} // end of class Pregel
