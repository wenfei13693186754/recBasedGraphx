package com.wdcloud.graphx.recommender.graph

import org.apache.spark.rdd.RDD
import org.apache.spark.graphx.Graph

import akka.event.slf4j.Logger
import com.wdcloud.graphx.recommender.graph.TwoDegreesFriendsRecommender
import com.wdcloud.graphx.recommender.graph.MixCommunityRecommender
import com.wdcloud.graphx.recommender.graph.util.GraphResultHandle

/**
 * 为指定用户组成的list进行基于圈子的推荐和基于二度好友的推荐
 * 	param:
 * 		graph: 进行推荐的图模型
 *    namespace: 命名空间
 */
class CompositeRecByUserListRecommenders(graphModel: Graph[Map[String, Object], Double], namespace: String) extends Serializable  {
  
  val logger = Logger(this.getClass.getName)

  /**
   * 混合基于圈子和基于二度好友的推荐
   * param:
   * 		userIdListStr: 指定用户id组成的list
   * return:
   * 		推荐结果
   */
  def predict(userIdListStr: List[String]): RDD[(String, String, Map[String, List[(String, Double)]])] = {
    val graph = graphModel.cache()
    //基于好友的推荐，包括推荐好友、物品和圈子，返回值类型是;RDD[(String, String, Map[String, List[(String, Double)]])]
    val recommenderBasedUser = new TwoDegreesFriendsRecommender()
    val recBasedFriends = recommenderBasedUser.predict(graph, namespace)
    logger.warn("基于好友推荐完成")
    //离线的对每个用户基于圈子进行物品、好友和圈子的推荐,返回值是RDD[(String, String, Map[String, List[(String, Double)]])]
    val recommenderBasedCircle = new MixCommunityRecommender()
    val recBasedCircle = recommenderBasedCircle.predict(graph,namespace)
    logger.warn("基于圈子推荐完成")
    //对两种推荐结果进行合并   INFO.LOGINID:112233xyf;
    val comResult = GraphResultHandle.combineResult(graph, namespace, recommenderBasedUser.result, recommenderBasedCircle.result)
    //对结果进行过滤
    val recResult = comResult.filter(x => userIdListStr.contains(x._2))
    logger.warn("开始释放缓存的图和基于好友和基于圈子的推荐结果")
    graph.unpersistVertices(blocking = false)
    graph.edges.unpersist(blocking = false)

    recResult
  }
}