package com.wdcloud.graphx.recommend

import java.io.File
import java.io.FileOutputStream
import java.io.PrintStream
import java.io.Serializable

import com.wdcloud.graphx.kafka.Producer
import com.wdcloud.graphx.unit.CreateSparkContext
import com.wdcloud.graphx.unit.DataToJson

import akka.event.slf4j.Logger
import org.apache.spark.SparkContext
import com.wdcloud.graphx.unit.CreateSparkContext

/**
 * 使用spark-graphx实现基于好友、圈子来实现推荐二度好友、圈子、物品
 * 		要求：1.离线的、全量的；
 * 				 2.各种关系基于不同权重进行推荐
 * 
 * jobserver调用
 *
 */
object RecEng extends Serializable {
    
  val logger = Logger(this.getClass.getName)   
  
/*  def startRec (
      sc: SparkContext, 
      namespace: String, 
      edgeTable: String, 
      pAttrTable: String, 
      iAttrTable: String
      ){*/
   def main(args: Array[String]): Unit = {
      
    val sc = CreateSparkContext.init()   
    val namespace: String = args(0) 
    val edgeTable: String = args(1) 
    val pAttrTable: String = args(2) 
    val iAttrTable: String = args(3)
    
    val t0 = System.currentTimeMillis()
    //创建图
    val graph = CreateGraph.createGraph(sc, namespace, edgeTable, pAttrTable, iAttrTable).cache()
    val t1 = System.currentTimeMillis()
    logger.warn("创建图用时："+(t1-t0))
    //调用推荐算法进行推荐结果的计算   
    val recCode = new RecCode(graph, namespace)
    val recResult = recCode.recForUsers().cache()
    logger.warn("将推荐结果放入到内存中")
    val t2 = System.currentTimeMillis()
    logger.warn("进行推荐一共用时："+(t2-t1))
    //将结果转化为json格式
    val jsonResult = DataToJson.recResultRDDToJson(recResult)
    val t3 = System.currentTimeMillis()
    logger.warn("将结果转化为json:"+(t3-t2))
    
    //将结果放到kafka中
    val kafkaProducer = Producer.sendMsgToKafka(jsonResult, namespace)  
    val t4 = System.currentTimeMillis()
    logger.warn("将结果放入到kafka用时："+(t4-t3))
/*    val fs = new FileOutputStream(
    		new File("/wdcloud/app/spark/data/rec_jobserver_result/recResult.log"));
    val p = new PrintStream(fs);
    recResult.collect().foreach(x => p.println(s"命名空间 ${x._1} 下${x._2}推荐结果是：${x._3.mkString(",")}"))*/
    logger.warn("释放掉推荐结果")
    recResult.unpersist(blocking = false)
  }  
}

