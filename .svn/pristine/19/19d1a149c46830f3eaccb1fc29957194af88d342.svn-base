package com.wdcloud.graphx.job

import org.apache.spark.SparkContext
import org.apache.spark.broadcast.Broadcast
import org.apache.spark.graphx.Graph
import org.apache.spark.graphx.GraphOps
import org.apache.spark.rdd.RDD
import scala.collection.mutable.Map
import scala.collection.mutable.LinkedList
import com.sun.corba.se.impl.io.TypeMismatchException
import com.wdcloud.graphx.javaUtil.Configuration
import com.wdcloud.graphx.modelBuild.graph.GraphModel
import com.wdcloud.graphx.modelBuild.graph.ReadDataFromHbase
import com.wdcloud.graphx.modelBuild.graph.create.CreateGraphModelFromEdgeByHbase
import com.wdcloud.graphx.modelTraining.Recommender
import com.wdcloud.graphx.modelTraining.graph.util.GraphResultHandle
import com.wdcloud.graphx.resultHandle.graph.SaveResult
import com.wdcloud.graphx.resultHandle.graph.SaveResultToHbase
import com.wdcloud.graphx.scalaUtil.HbaseUtil
import com.wdcloud.graphx.scalaUtil.ScalaRefUtil

import akka.event.slf4j.Logger
import com.wdcloud.graphx.modelBuild.graph.ReadDataFromHbase
import com.wdcloud.graphx.modelTraining.graph.TwoDegreesFriendsRecommender
import com.wdcloud.graphx.modelTraining.graph.MixCommunityRecommender
import com.wdcloud.graphx.resultHandle.graph.SaveResultToText
import org.apache.spark.graphx.Edge

/**
 * 任务的执行调度
 */
class Job(val sc: SparkContext) extends Serializable {
  var graph: Graph[Map[Int, Any], Double] = null
  var finallyResult: RDD[(Int, String, Map[String, Array[(String, Double)]])] = null
  var userConf: Map[String, String] = null
  val logger = Logger(this.getClass.getName)

  /**
   * 运行任务
   */
  def run(conf: Configuration) {
    logger.warn("任务开始调用")
    writeConfInfoToHbase(conf, "JANUARY:T_USER_CONF")
    greateModel(conf)
    trainModel(conf)
    handleResult(conf)
    logger.warn("任务执行完成")

  }

  /**
   * 将用户配置信息写入到hbase中
   */
  def writeConfInfoToHbase(conf: Configuration, tableName: String) {
    HbaseUtil.writeUserConfInfo(conf, tableName) //将用户配置信息写入到hbase配置表中
  }

  /**
   * 生成图模型
   */
  def greateModel(conf: Configuration) {
    userConf = ReadDataFromHbase.readUserConf(sc, conf)
    //获取数据源类型，通过数据源类型得到试用那种方式生成图模型
    val dataSourceType = userConf.get("dataSource.type")
    val className = userConf.get(dataSourceType.get).get
    var instObject: GraphModel = null
    if (dataSourceType != None) {
      //根据数据源类型，使用反射创建生成图的实例对象 
      try {
        val inst = ScalaRefUtil.newInstance(className).asInstanceOf[GraphModel]
        if (inst.isInstanceOf[GraphModel]) {
          instObject = inst.asInstanceOf[GraphModel]
        } else {
          throw new TypeMismatchException
        }
        //调用对象方法得出结果
        graph = instObject.createGraph(sc, conf)
      } catch {
        case e: Throwable => e.printStackTrace() // TODO: handle error
      }
    } else {
      //默认使用边数据生成图    
      val graphObject: GraphModel = new CreateGraphModelFromEdgeByHbase()

      //调用生成图的方法
      graph = graphObject.createGraph(sc, conf)
    }

  }

  /**
   * 训练模型（使用配置好的算法对模型进行训练）
   */
  def trainModel(conf: Configuration) {
    //获取算法标识
    val algoOption = userConf.get("rec.recommender.class").get
    val className = userConf.get(algoOption).get
    var instObject: Recommender = null

    try {
      val inst = ScalaRefUtil.newInstance(className, userConf)
      if (inst.isInstanceOf[Recommender]) {
        instObject = inst.asInstanceOf[Recommender]
        logger.warn("推荐算法对象是：" + instObject.toString())
      } else {
        throw new TypeMismatchException
      }
      //调用对象方法得出结果
      val middleResult = instObject.predict(sc, graph)
      val result = middleResult.reduceByKey((x, y) => GraphResultHandle.mapCombine(x, y)).map(x => (0, x._1, x._2))
      finallyResult = GraphResultHandle.finallyResultHandle(result)
      logger.warn("推荐结果处理完成")
    } catch {
      case e: Throwable => e.printStackTrace() // TODO: handle error
    }

    logger.warn("推荐结果处理完成")

  }

  /**
   * 对模型训练的结果进行处理
   */
  def handleResult(conf: Configuration) {
    logger.warn("开始处理数据")
    //获取推荐结果保存算法标示符
    val saveRecType = userConf.get("rec.saveReslut.type")
    //将推荐结果进行持久化
    var instObject: SaveResult = null
    if (saveRecType != None) {
      val className: String = userConf.get(saveRecType.get).get
      try {
        val inst = ScalaRefUtil.newInstance(className, userConf)
        if (inst.isInstanceOf[SaveResult]) {
          instObject = inst.asInstanceOf[SaveResult]
        } else {
          throw new TypeMismatchException 
        }
        //调用对象方法得出结果
        instObject.saveResult(finallyResult)
      } catch {
        case e: Throwable => e.printStackTrace() // TODO: handle error 
      }
    } else {
      //默认结果持久化到hbase中    
      instObject = new SaveResultToHbase(userConf)
      instObject.saveResult(finallyResult)
    }
  }
}