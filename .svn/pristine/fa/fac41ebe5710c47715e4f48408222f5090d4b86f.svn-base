package com.wdcloud.graphx.recommender.graph

import org.apache.spark.rdd.RDD
import com.wdcloud.graphx.scalaUtil.HbaseUtil
import com.wdcloud.graphx.recommender.graph.util.GraphResultHandle
import akka.event.slf4j.Logger
import org.apache.spark.graphx.Graph
import com.wdcloud.graphx.recommender.graph.MixCommunityRecommender

/**
 * 为所有用户进行基于圈子和基于二度好友的推荐
 * 	graphModel: 进行推荐的图模型
 *  namespace：命名空间
 * 
 */
class CompositeRecForAllUserRecommenders(graphModel: Graph[Map[String, Object], Double], namespace: String) extends Serializable  {

  val logger = Logger(this.getClass.getName) 
  
  /**
   * 为所有用户进行基于圈子和基于二度好友的推荐
   * 	return: 推荐结果
   */
  def predict(): RDD[(String, String, Map[String, List[(String, Double)]])] = { 
    val graph = graphModel.cache()
    //基于好友的推荐，包括推荐好友、物品和圈子，返回值类型是：
    //RDD[(VertexId, (String, Map[String, List[(String, Double)]]))]-->RDD[(用户id，(用户业务id, Map[推荐物品类型, List[(推荐物品业务id, Double)]]))]
    val recommenderBasedUser = new TwoDegreesFriendsRecommender()
    val recBasedFriends = recommenderBasedUser.predict(graph, namespace)
    
    HbaseUtil.writeRecInfoBasedUer(namespace, "T_REC_BASEDUSER", recommenderBasedUser.result.collect())
    logger.warn("基于好友推荐完成")
    //离线的对每个用户基于圈子进行物品、好友和圈子的推荐,返回值是RDD[(String, String, Map[String, List[(String, Double)]])]
    val recommenderBasedCircle = new MixCommunityRecommender()
    val recBasedCircle = recommenderBasedCircle.predict(graph,namespace)
    HbaseUtil.writeRecInfoBasedCircle(namespace, "T_REC_BASEDCIRCLE", recommenderBasedCircle.result.collect())
    logger.warn("基于圈子推荐完成")
    //对两种推荐结果进行合并   INFO.LOGINID:112233xyf;
    val comResult = GraphResultHandle.combineResult(graph, namespace, recommenderBasedUser.result, recommenderBasedCircle.result)

    logger.warn("开始释放缓存的图和基于好友和基于圈子的推荐结果")
    graph.unpersistVertices(blocking = false)
    graph.edges.unpersist(blocking = false)

    comResult
  }
}